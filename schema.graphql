type Brand {
  approved: Boolean
  createdAt: ISO8601DateTime!
  creator: User
  description: String
  id: ID!
  name: String!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!
  slug: String!
  updatedAt: ISO8601DateTime!
  users: [User!]!
}

"""
The connection type for Brand.
"""
type BrandConnection {
  """
  A list of edges.
  """
  edges: [BrandEdge!]!

  """
  A list of nodes.
  """
  nodes: [Brand!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type BrandEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Brand
}

"""
Autogenerated input type of CompleteProjectFileUpload
"""
input CompleteProjectFileUploadInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  filename: String!
  filepath: String!
  filesize: Int!
  filetype: String
  projectId: ID!
  url: String!
}

"""
Autogenerated return type of CompleteProjectFileUpload
"""
type CompleteProjectFileUploadPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectFile: ProjectFile!
}

"""
Autogenerated input type of DeleteProjectFile
"""
input DeleteProjectFileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteProjectFile
"""
type DeleteProjectFilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  projectFile: ProjectFile!
}

"""
Autogenerated input type of DeleteProject
"""
input DeleteProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of DeleteProject
"""
type DeleteProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
}

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type License {
  dedicationHtml: String
  discouraged: Boolean!
  discouragedReason: String
  id: ID!
  logoUrl: String
  name: String!
  url: String!
}

type Mutation {
  completeProjectFileUpload(
    """
    Parameters for CompleteProjectFileUpload
    """
    input: CompleteProjectFileUploadInput!
  ): CompleteProjectFileUploadPayload
  deleteProject(
    """
    Parameters for DeleteProject
    """
    input: DeleteProjectInput!
  ): DeleteProjectPayload
  deleteProjectFile(
    """
    Parameters for DeleteProjectFile
    """
    input: DeleteProjectFileInput!
  ): DeleteProjectFilePayload
  updateProject(
    """
    Parameters for UpdateProject
    """
    input: UpdateProjectInput!
  ): UpdateProjectPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Project {
  authors: String
  brand: Brand!
  createdAt: ISO8601DateTime!
  currentUserCanDelete: Boolean!
  currentUserCanDeleteFiles: Boolean!
  currentUserCanEdit: Boolean!
  currentUserCanUploadFiles: Boolean!
  description: String
  id: ID!
  lengthQuantity: Int
  lengthUnits: String
  license: License
  maxPlayers: Int
  minPlayers: Int
  projectFiles: [ProjectFile!]!
  publicationYear: Int
  tags: [Tag!]!
  title: String
  updatedAt: ISO8601DateTime!
}

input ProjectAttributes {
  authors: String
  description: String
  lengthQuantity: Int
  lengthUnits: String
  licenseId: ID
  maxPlayers: Int
  minPlayers: Int
  publicationYear: Int
  tagNames: [String!]
  title: String
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge!]!

  """
  A list of nodes.
  """
  nodes: [Project!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

type ProjectFile {
  createdAt: ISO8601DateTime!
  filename: String!
  filepath: String!
  filesize: Int!
  filetype: String
  id: ID!
  project: Project!
  updatedAt: ISO8601DateTime!
  uploaderId: Int
  url: String!
}

type ProjectPromotion {
  createdAt: ISO8601DateTime!
  id: ID!
  project: Project!
  updatedAt: ISO8601DateTime!
}

type Query {
  brand(id: ID!): Brand!
  brands(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): BrandConnection!
  licenses: [License!]!
  project(id: ID!): Project!
  projectPromotions: [ProjectPromotion!]!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    brandId: Int

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    queryString: String
    tag: String
  ): ProjectConnection!
  tagCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): TagCategoryConnection!
  tags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    queryString: String
  ): TagConnection!
}

type Tag {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ProjectConnection!
  tagCategory: TagCategory
  updatedAt: ISO8601DateTime!
}

type TagCategory {
  color: String
  createdAt: ISO8601DateTime!
  icon: String
  id: ID!
  name: String!
  tags: [Tag!]!
  textColor: String
  updatedAt: ISO8601DateTime!
}

"""
The connection type for TagCategory.
"""
type TagCategoryConnection {
  """
  A list of edges.
  """
  edges: [TagCategoryEdge!]!

  """
  A list of nodes.
  """
  nodes: [TagCategory!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TagCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: TagCategory
}

"""
The connection type for Tag.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge!]!

  """
  A list of nodes.
  """
  nodes: [Tag!]!

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag
}

"""
Autogenerated input type of UpdateProject
"""
input UpdateProjectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
  projectAttributes: ProjectAttributes!
}

"""
Autogenerated return type of UpdateProject
"""
type UpdateProjectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  project: Project!
}

type User {
  admin: Boolean
  email: String
  firstname: String
  id: ID!
  lastname: String
  username: String!
}