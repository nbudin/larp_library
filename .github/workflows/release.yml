name: Release

on:
  release:
    types: [published]

jobs:
  docker-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DockerHubUsername }}
          password: ${{ secrets.DockerHubPassword }}
      - name: Pull built image
        run: docker pull ghcr.io/neinteractiveliterature/larp_library:${{ github.sha }}
      - name: Tag image with version Tag
        run: docker tag ghcr.io/neinteractiveliterature/larp_library:${{ github.sha }} neinteractiveliterature/larp_library:${{ github.event.release.name }}
      - name: Tag image as latest
        run: docker tag ghcr.io/neinteractiveliterature/larp_library:${{ github.sha }} neinteractiveliterature/larp_library:latest
      - name: Push to Docker Hub
        run: docker push neinteractiveliterature/larp_library:latest && docker push neinteractiveliterature/larp_library:${{ github.event.release.name }}
  heroku-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Heroku CLI
        run: curl https://cli-assets.heroku.com/install.sh | sh
      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Pull built image
        run: docker pull ghcr.io/neinteractiveliterature/larp_library:${{ github.sha }}
      - name: Log into Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HerokuApiToken }}
        run: heroku container:login
      - name: Tag production image as "web"
        run: docker tag ghcr.io/neinteractiveliterature/larp_library:${{ github.sha }} registry.heroku.com/${{ secrets.HerokuAppName }}/web
      - name: Push "web" image to Heroku Container Registry
        run: docker push registry.heroku.com/${{ secrets.HerokuAppName }}/web
      - name: Build "release" image
        run: docker buildx build -t registry.heroku.com/${{ secrets.HerokuAppName }}/release
          --build-arg BASE_IMAGE=ghcr.io/neinteractiveliterature/larp_library:${{ github.sha }}
          --build-arg REVISION=${{ github.sha }}
          -f Dockerfile.release
          --push
          .
      - name: Release app to Heroku
        env:
          HEROKU_API_KEY: ${{ secrets.HerokuApiToken }}
        run: heroku container:release -a ${{ secrets.HerokuAppName }} web release
  fly-release:
    runs-on: ubuntu-latest
    needs:
      - docker-release
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only -a intercode
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  notify-slack:
    runs-on: ubuntu-latest
    needs:
      - heroku-release
      - fly-release
    steps:
      - name: Format release notes for Slack
        id: format-release-notes
        uses: LoveToKnow/slackify-markdown-action@v1.0.2
        with:
          text: ${{ github.event.release.body }}
      - name: Post about release to Slack
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: ${{ secrets.SlackReleaseNotificationChannelID }}
          payload: |
            {
              "text": "Larp Library ${{ github.event.release.name }} released to production",
              "unfurl_links": false,
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Larp Library ${{ github.event.release.name }} released to production"
                  }
                },
                { "type": "divider" },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ${{ toJSON(steps.format-release-notes.outputs.text) }}
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SlackToken }}
