/* eslint-disable */
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
};

export type Brand = {
  __typename: 'Brand';
  approved?: Maybe<Scalars['Boolean']>;
  brandMemberships: Array<BrandMembership>;
  createdAt: Scalars['ISO8601DateTime'];
  creator?: Maybe<User>;
  currentUserCanCreateProjects: Scalars['Boolean'];
  currentUserCanEdit: Scalars['Boolean'];
  currentUserCanManageMemberships: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  projects: ProjectConnection;
  slug: Scalars['String'];
  updatedAt: Scalars['ISO8601DateTime'];
  users: Array<User>;
};


export type BrandProjectsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type BrandAttributes = {
  description?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** The connection type for Brand. */
export type BrandConnection = {
  __typename: 'BrandConnection';
  /** A list of edges. */
  edges: Array<BrandEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type BrandEdge = {
  __typename: 'BrandEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Brand;
};

export type BrandMembership = {
  __typename: 'BrandMembership';
  admin: Scalars['Boolean'];
  brand?: Maybe<Brand>;
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  invitationEmail?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
  user?: Maybe<User>;
};

/** Autogenerated input type of CompleteProjectFileUpload */
export type CompleteProjectFileUploadInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  filename: Scalars['String'];
  filepath: Scalars['String'];
  filesize: Scalars['Int'];
  filetype?: Maybe<Scalars['String']>;
  projectId: Scalars['ID'];
  url: Scalars['String'];
};

/** Autogenerated return type of CompleteProjectFileUpload */
export type CompleteProjectFileUploadPayload = {
  __typename: 'CompleteProjectFileUploadPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  projectFile: ProjectFile;
};

/** Autogenerated input type of CreateBrand */
export type CreateBrandInput = {
  brandAttributes: BrandAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateBrand */
export type CreateBrandPayload = {
  __typename: 'CreateBrandPayload';
  brand: Brand;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of CreateProject */
export type CreateProjectInput = {
  brandId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  projectAttributes: ProjectAttributes;
};

/** Autogenerated return type of CreateProject */
export type CreateProjectPayload = {
  __typename: 'CreateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
};

/** Autogenerated input type of DeleteBrandMembership */
export type DeleteBrandMembershipInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteBrandMembership */
export type DeleteBrandMembershipPayload = {
  __typename: 'DeleteBrandMembershipPayload';
  brandMembership: BrandMembership;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of DeleteProjectFile */
export type DeleteProjectFileInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteProjectFile */
export type DeleteProjectFilePayload = {
  __typename: 'DeleteProjectFilePayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  projectFile: ProjectFile;
};

/** Autogenerated input type of DeleteProject */
export type DeleteProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of DeleteProject */
export type DeleteProjectPayload = {
  __typename: 'DeleteProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
};


/** Autogenerated input type of InviteBrandMember */
export type InviteBrandMemberInput = {
  admin: Scalars['Boolean'];
  brandId: Scalars['ID'];
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  email: Scalars['String'];
};

/** Autogenerated return type of InviteBrandMember */
export type InviteBrandMemberPayload = {
  __typename: 'InviteBrandMemberPayload';
  brandMembership: BrandMembership;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

export type License = {
  __typename: 'License';
  dedicationHtml?: Maybe<Scalars['String']>;
  discouraged: Scalars['Boolean'];
  discouragedReason?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  logoUrl?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  url: Scalars['String'];
};

export type Mutation = {
  __typename: 'Mutation';
  completeProjectFileUpload?: Maybe<CompleteProjectFileUploadPayload>;
  createBrand?: Maybe<CreateBrandPayload>;
  createProject?: Maybe<CreateProjectPayload>;
  deleteBrandMembership?: Maybe<DeleteBrandMembershipPayload>;
  deleteProject?: Maybe<DeleteProjectPayload>;
  deleteProjectFile?: Maybe<DeleteProjectFilePayload>;
  inviteBrandMember?: Maybe<InviteBrandMemberPayload>;
  updateBrand?: Maybe<UpdateBrandPayload>;
  updateProject?: Maybe<UpdateProjectPayload>;
};


export type MutationCompleteProjectFileUploadArgs = {
  input: CompleteProjectFileUploadInput;
};


export type MutationCreateBrandArgs = {
  input: CreateBrandInput;
};


export type MutationCreateProjectArgs = {
  input: CreateProjectInput;
};


export type MutationDeleteBrandMembershipArgs = {
  input: DeleteBrandMembershipInput;
};


export type MutationDeleteProjectArgs = {
  input: DeleteProjectInput;
};


export type MutationDeleteProjectFileArgs = {
  input: DeleteProjectFileInput;
};


export type MutationInviteBrandMemberArgs = {
  input: InviteBrandMemberInput;
};


export type MutationUpdateBrandArgs = {
  input: UpdateBrandInput;
};


export type MutationUpdateProjectArgs = {
  input: UpdateProjectInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Project = {
  __typename: 'Project';
  authors?: Maybe<Scalars['String']>;
  brand: Brand;
  createdAt: Scalars['ISO8601DateTime'];
  currentUserCanDelete: Scalars['Boolean'];
  currentUserCanDeleteFiles: Scalars['Boolean'];
  currentUserCanEdit: Scalars['Boolean'];
  currentUserCanUploadFiles: Scalars['Boolean'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lengthQuantity?: Maybe<Scalars['Int']>;
  lengthUnits?: Maybe<Scalars['String']>;
  license?: Maybe<License>;
  maxPlayers?: Maybe<Scalars['Int']>;
  minPlayers?: Maybe<Scalars['Int']>;
  projectFiles: Array<ProjectFile>;
  publicationYear?: Maybe<Scalars['Int']>;
  tags: Array<Tag>;
  title?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type ProjectAttributes = {
  authors?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  lengthQuantity?: Maybe<Scalars['Int']>;
  lengthUnits?: Maybe<Scalars['String']>;
  licenseId?: Maybe<Scalars['ID']>;
  maxPlayers?: Maybe<Scalars['Int']>;
  minPlayers?: Maybe<Scalars['Int']>;
  publicationYear?: Maybe<Scalars['Int']>;
  tagNames?: Maybe<Array<Scalars['String']>>;
  title?: Maybe<Scalars['String']>;
};

/** The connection type for Project. */
export type ProjectConnection = {
  __typename: 'ProjectConnection';
  /** A list of edges. */
  edges: Array<ProjectEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ProjectEdge = {
  __typename: 'ProjectEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Project;
};

export type ProjectFile = {
  __typename: 'ProjectFile';
  createdAt: Scalars['ISO8601DateTime'];
  filename: Scalars['String'];
  filepath: Scalars['String'];
  filesize: Scalars['Int'];
  filetype?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  project: Project;
  updatedAt: Scalars['ISO8601DateTime'];
  uploaderId?: Maybe<Scalars['Int']>;
  url: Scalars['String'];
};

export type ProjectPromotion = {
  __typename: 'ProjectPromotion';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  project: Project;
  updatedAt: Scalars['ISO8601DateTime'];
};

export type Query = {
  __typename: 'Query';
  brand: Brand;
  brands: BrandConnection;
  currentUser?: Maybe<User>;
  licenses: Array<License>;
  project: Project;
  projectPromotions: Array<ProjectPromotion>;
  projects: ProjectConnection;
  tagCategories: TagCategoryConnection;
  tags: TagConnection;
};


export type QueryBrandArgs = {
  id?: Maybe<Scalars['ID']>;
  slug?: Maybe<Scalars['String']>;
};


export type QueryBrandsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryProjectArgs = {
  id: Scalars['ID'];
};


export type QueryProjectsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  brandId?: Maybe<Scalars['Int']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  queryString?: Maybe<Scalars['String']>;
  tag?: Maybe<Scalars['String']>;
};


export type QueryTagCategoriesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTagsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
  queryString?: Maybe<Scalars['String']>;
};

export type Tag = {
  __typename: 'Tag';
  createdAt: Scalars['ISO8601DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  projects: ProjectConnection;
  tagCategory?: Maybe<TagCategory>;
  updatedAt: Scalars['ISO8601DateTime'];
};


export type TagProjectsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type TagCategory = {
  __typename: 'TagCategory';
  color?: Maybe<Scalars['String']>;
  createdAt: Scalars['ISO8601DateTime'];
  icon?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  tags: Array<Tag>;
  textColor?: Maybe<Scalars['String']>;
  updatedAt: Scalars['ISO8601DateTime'];
};

/** The connection type for TagCategory. */
export type TagCategoryConnection = {
  __typename: 'TagCategoryConnection';
  /** A list of edges. */
  edges: Array<TagCategoryEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TagCategoryEdge = {
  __typename: 'TagCategoryEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: TagCategory;
};

/** The connection type for Tag. */
export type TagConnection = {
  __typename: 'TagConnection';
  /** A list of edges. */
  edges: Array<TagEdge>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TagEdge = {
  __typename: 'TagEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Tag;
};

/** Autogenerated input type of UpdateBrand */
export type UpdateBrandInput = {
  brandAttributes: BrandAttributes;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of UpdateBrand */
export type UpdateBrandPayload = {
  __typename: 'UpdateBrandPayload';
  brand: Brand;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateProject */
export type UpdateProjectInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  projectAttributes: ProjectAttributes;
};

/** Autogenerated return type of UpdateProject */
export type UpdateProjectPayload = {
  __typename: 'UpdateProjectPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  project: Project;
};

export type User = {
  __typename: 'User';
  admin?: Maybe<Scalars['Boolean']>;
  brandMemberships: Array<BrandMembership>;
  brands: Array<Brand>;
  email?: Maybe<Scalars['String']>;
  firstname?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastname?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  username: Scalars['String'];
};
